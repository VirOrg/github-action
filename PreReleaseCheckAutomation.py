import git
import os
from git import InvalidGitRepositoryError, Repo
import pathlib
import fileinput
import shutil
from github import Github
import subprocess
import sys

# constants start
configRepoUrl = "https://github.com/foxcorp/cpe-client-config.git"
nationRepoUrl = "https://github.com/foxcorp/foxnation-android.git"
rootPath = "auto-script"
repoConfig = "config" 
repoNation = "nation"
config = "config"
foxNation = "foxNation"
foxNationVersionBumpUp = "foxNationVersionBumpUp"
fileTypes = [".json"]
# constants end

def inputVersions():
    global oldVersion
    global newVersion
    oldVersion = input("Enter Current Version: ")
    newVersion = input("Enter Next Version: ")


def createDirectoryIfNotExisting():
    parentDir = os.getcwd()+"/Documents"
    dir = os.path.join(parentDir, rootPath)
    if not os.path.isdir(dir):
        os.mkdir(dir)
        createInternalDirectoryIfNotExisting()
    else:
        for filename in os.listdir(dir):
            filePath = os.path.join(dir, filename)
            try:
                if os.path.isfile(filePath) or os.path.islink(filePath):
                    os.unlink(filePath)
                elif os.path.isdir(filePath):
                    shutil.rmtree(filePath)  
            except Exception as e:
                print('Failed to delete %s. Reason: %s' % (filePath, e))
            finally: 
                createInternalDirectoryIfNotExisting()
        


def createInternalDirectoryIfNotExisting():
    parentDir = os.getcwd()+"/Documents"
    rootDir = os.path.join(parentDir, rootPath)
    if not os.path.isdir(os.path.join(rootDir,repoConfig)):
        os.mkdir(os.path.join(rootDir,repoConfig))
    if not os.path.isdir(os.path.join(rootDir,repoNation)):
        os.mkdir(os.path.join(rootDir,repoNation))

def cloneRepo(repoConstant):
    parentDir = os.getcwd()+"/Documents"
    rootDir = os.path.join(parentDir, rootPath)
    if repoConstant is config:
        return accessRepoOrClone(os.path.join(rootDir,repoConfig),configRepoUrl)
    if repoConstant is foxNation:
        return accessRepoOrClone(os.path.join(rootDir,repoNation),nationRepoUrl)

def createBranch(repoConstant, repositoryObj):
    if repoConstant is config:
        checkAndCreateBranchAndPush(repositoryObj, "autogenerated-config-update/"+newVersion)
    if repoConstant is foxNation:
        checkAndCreateBranchAndPush(repositoryObj, "release/autogenerated/"+oldVersion)
    if repoConstant is foxNationVersionBumpUp:
        checkAndCreateBranchAndPush(repositoryObj, "chore/autogenerated/bump-"+newVersion)


def createCopyAndReplaceConfigNationFNI():
    parentDir = os.getcwd()+"/Documents"
    rootDir = os.path.join(parentDir, rootPath)
    conifDir = os.path.join(rootDir,repoConfig)
    sourceDirNation = os.path.join(conifDir,"foxnation/android/"+oldVersion)
    destinationDirNation = os.path.join(conifDir,"foxnation/android/"+newVersion)
    createCopyAndRelpaceConfig(sourceDirNation,destinationDirNation)
    sourceDirFNI = os.path.join(conifDir,"foxnewsinternational/android/"+oldVersion)
    destinationDirFNI = os.path.join(conifDir,"foxnewsinternational/android/"+newVersion)
    createCopyAndRelpaceConfig(sourceDirFNI,destinationDirFNI)


def createCopyAndRelpaceConfig(sourceDir, destinationDir) :
    if not os.path.isdir(destinationDir):
        shutil.copytree(sourceDir, destinationDir)
    listOfFiles = os.listdir(destinationDir)
    for file in listOfFiles:
        filePath = destinationDir+"/"+file
        if(os.path.isfile(filePath)):
            extension = pathlib.Path(filePath).suffix
            print("it is a file and extension = "+extension)
            print("it is a file and extension = "+extension)
            if extension in fileTypes:
                file = open(filePath)
                newText = file.read().replace(oldVersion, newVersion)
                file = open(filePath, "w")
                file.write(newText)
                print("Replace success")

def accessRepoOrClone(path, repoUrl):
    try:
        repo = Repo(path)
        repo.git_dir
        print('already under git control')
        return repo
    except InvalidGitRepositoryError:
        repo = Repo.clone_from(repoUrl, path)
        print('cloning the repo')
        return repo

def checkAndCreateBranchAndPush(repo: Repo, branchName):
    git = repo.git
    try:
        git.checkout('-b', branchName)
    except:
        git.checkout(branchName)
    git.push("origin", branchName)


def commitAndPush(repository,repoConstant):
    repository.git.add(all=True)

    if repoConstant is config:
        try:
            repository.git.commit('-m', 'Auto-generated added config for the next version.', author='vinitsaxena')
        except:
            print("nothing to commit, working tree clean")
        finally:
            repository.git.push("origin", "autogenerated-config-update/"+newVersion)
    elif repoConstant is foxNationVersionBumpUp:
        try:
            repository.git.commit('-m', 'Auto-generated bump up version from '+oldVersion+" to "+newVersion, author='vinitsaxena')
        except:
            print("nothing to commit, working tree clean")
        finally:
            repository.git.push("origin", "chore/autogenerated/bump-"+newVersion)

def createPullRequest(repoConstant):
    g = Github("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")
    if repoConstant is config:
        repo = g.get_repo("foxcorp/cpe-client-config")
        pr = repo.create_pull(title="Auto Generated PR Config update for "+newVersion, body="", head="autogenerated-config-update/"+newVersion, base="master")
        print(pr.diff_url)
        print(pr.commits_url)
        print(pr.patch_url)
    elif repoConstant is foxNationVersionBumpUp:
        repo = g.get_repo("foxcorp/foxnation-android")
        pr = repo.create_pull(title="Auto Generated PR Bump up version "+newVersion, body="", head="chore/autogenerated/bump-"+newVersion, base="develop")
        print(pr.diff_url)
        print(pr.commits_url)
        print(pr.patch_url)

def bumpVersionNation(): 
    parentDir = os.getcwd()+"/Documents"
    rootDir = os.path.join(parentDir, rootPath)
    nationDir = os.path.join(rootDir,repoNation)
    gradlePropertyDir = os.path.join(nationDir,"DeltaApplication/DCGDelta")
    filePath = gradlePropertyDir+"/"+"gradle.properties"
    file = open(filePath)
    newText = file.read().replace(oldVersion, newVersion)
    file = open(filePath, "w")
    file.write(newText)

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

install("GitPython")
install("PyGithub")
inputVersions()
createDirectoryIfNotExisting()
repository = cloneRepo(config)
createBranch(config,repository)
createCopyAndReplaceConfigNationFNI()
commitAndPush(repository,config)
createPullRequest(config)
nationRepository = cloneRepo(foxNation)
actvieBranch = nationRepository.active_branch
print("Fox Nation Active Branch - "+nationRepository.active_branch.name)
createBranch(foxNation,nationRepository)
actvieBranch.checkout()
createBranch(foxNationVersionBumpUp,nationRepository)
bumpVersionNation()
commitAndPush(nationRepository,foxNationVersionBumpUp)
createPullRequest(foxNationVersionBumpUp)
